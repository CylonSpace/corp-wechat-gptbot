name: 构建 && 推送 && 部署

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  
# 仅允许管理员手动执行
permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  LOG_LEVEL: debug  

jobs:
  buildImageAndPubilsh:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: 拉取仓库
        uses: actions/checkout@v3
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: 安装登陆组件 cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.13.1'
     # 缓存 Docker 镜像以加速构建
      - name: 缓存层
        uses: actions/cache@v2.1.8
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-


        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up buildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: 支持平台
        run: echo ${{ steps.buildx.outputs.platforms }}        
      - name: 查看构建器
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: 登入仓库 ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: 解析Docker头 metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: 构建并推送
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the resulting Docker image digest 
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
  installAndCheckDockerEnv:
    needs: [buildImageAndPubilsh]
    runs-on: ubuntu-latest
    steps:
    - name: 检查Docker是否安装
      id: check-docker
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_SSH_USERNAME }}
        password: ${{ secrets.VPS_SSH_PASSWD }}
        port: ${{ secrets.VPS_SSH_PORT}}
        script: |
          if command -v docker > /dev/null 2>&1; then
            echo "Docker is already installed on the remote server"
            echo "::set-output name=installed::true"
            echo "envCheckRes=true" >> $GITHUB_ENV
          else
            echo "Docker is not installed on the remote server"
            echo "::set-output name=installed::false"
          fi        
    - name: 安装Docker
      id: install-docker
      if: steps.check-docker.outputs.installed == 'false'
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_SSH_USERNAME }}
        password: ${{ secrets.VPS_SSH_PASSWD }}
        port: ${{ secrets.VPS_SSH_PORT}}
        script: |
          sudo apt update
          sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io
          sudo systemctl start docker
          sudo usermod -aG docker $USER
          echo "envCheckRes=true" >> $GITHUB_ENV
  deployDockerToRemote:
    needs: [buildImageAndPubilsh,installAndCheckDockerEnv]
    if: ${{ envCheckRes == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: 部署Docker到服务器
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          password: ${{ secrets.VPS_SSH_PASSWD }}
          port: ${{ secrets.VPS_SSH_PORT}}
          script: |
            docker stop gpt-webot 
            docker rm gpt-webot
            docker login ghcr.io -u ${{ secrets.DOCKER_DEPLOY_USERNAME }} -p ${{ secrets.DOCKER_DEPLOY_TOKEN }} 
            docker pull ghcr.io/baiyz0825/corp-webot:main
            docker run -d --name=gpt-webot --net=host -p 50008:50008 -v /home/byz/gpt/config:/apps/config -v /home/byz/gpt/db:/apps/db -v /home/byz/gpt/logs:/apps/logs --restart=always ghcr.io/baiyz0825/corp-webot:main
            docker ps -al | grep gpt-webot      
  cleanup:
    runs-on: ubuntu-latest
    needs: [deployDockerToRemote]
    if: always()
    steps:
      - name: 清除环境
        # 清除设置的工作流标志
        run: echo "::unset-env envCheckRes::"
        shell: bash            

